require('dotenv').config();
const fs = require('fs');
const path = require('path');

// STANDARDIZED 6 THEMES - NO MORE WILL BE CREATED
const STANDARD_THEMES = {
  en: {
    'Life Philosophy': 'Life Philosophy',
    'Wisdom & Learning': 'Wisdom & Learning',
    'Success & Perseverance': 'Success & Perseverance',
    'Relationships & Character': 'Relationships & Character',
    'Strategy & Action': 'Strategy & Action',
    'Character & Behavior': 'Character & Behavior'
  },
  es: {
    'Life Philosophy': 'Filosof√≠a de Vida',
    'Wisdom & Learning': 'Sabidur√≠a y Aprendizaje',
    'Success & Perseverance': '√âxito y Perseverancia',
    'Relationships & Character': 'Relaciones y Car√°cter',
    'Strategy & Action': 'Estrategia y Acci√≥n',
    'Character & Behavior': 'Car√°cter y Comportamiento'
  },
  pt: {
    'Life Philosophy': 'Filosofia de Vida',
    'Wisdom & Learning': 'Sabedoria e Aprendizagem',
    'Success & Perseverance': 'Sucesso e Perseveran√ßa',
    'Relationships & Character': 'Relacionamentos e Car√°ter',
    'Strategy & Action': 'Estrat√©gia e A√ß√£o',
    'Character & Behavior': 'Car√°ter e Comportamento'
  },
  id: {
    'Life Philosophy': 'Filosofi Hidup',
    'Wisdom & Learning': 'Kebijaksanaan & Pembelajaran',
    'Success & Perseverance': 'Sukses & Ketekunan',
    'Relationships & Character': 'Hubungan & Karakter',
    'Strategy & Action': 'Strategi & Tindakan',
    'Character & Behavior': 'Karakter & Perilaku'
  },
  vi: {
    'Life Philosophy': 'Tri·∫øt l√Ω s·ªëng',
    'Wisdom & Learning': 'Tr√≠ tu·ªá & H·ªçc t·∫≠p',
    'Success & Perseverance': 'Th√†nh c√¥ng & Ki√™n tr√¨',
    'Relationships & Character': 'M·ªëi quan h·ªá & T√≠nh c√°ch',
    'Strategy & Action': 'Chi·∫øn l∆∞·ª£c & H√†nh ƒë·ªông',
    'Character & Behavior': 'T√≠nh c√°ch & H√†nh vi'
  },
  ja: {
    'Life Philosophy': '‰∫∫ÁîüÂì≤Â≠¶',
    'Wisdom & Learning': 'Áü•ÊÅµ„Å®Â≠¶„Å≥',
    'Success & Perseverance': 'ÊàêÂäü„Å®ÂøçËÄê',
    'Relationships & Character': '‰∫∫ÈñìÈñ¢‰øÇ„Å®ÊÄßÊ†º',
    'Strategy & Action': 'Êà¶Áï•„Å®Ë°åÂãï',
    'Character & Behavior': 'ÊÄßÊ†º„Å®Ë°åÂãï'
  },
  ko: {
    'Life Philosophy': 'Ïù∏ÏÉù Ï≤†Ìïô',
    'Wisdom & Learning': 'ÏßÄÌòúÏôÄ ÌïôÏäµ',
    'Success & Perseverance': 'ÏÑ±Í≥µÍ≥º Ïù∏ÎÇ¥',
    'Relationships & Character': 'Í¥ÄÍ≥ÑÏôÄ ÏÑ±Í≤©',
    'Strategy & Action': 'Ï†ÑÎûµÍ≥º ÌñâÎèô',
    'Character & Behavior': 'ÏÑ±Í≤©Í≥º ÌñâÎèô'
  },
  th: {
    'Life Philosophy': '‡∏õ‡∏£‡∏±‡∏ä‡∏ç‡∏≤‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï',
    'Wisdom & Learning': '‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ',
    'Success & Perseverance': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏≤‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏£',
    'Relationships & Character': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û',
    'Strategy & Action': '‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥',
    'Character & Behavior': '‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°'
  },
  hi: {
    'Life Philosophy': '‡§ú‡•Ä‡§µ‡§® ‡§¶‡§∞‡•ç‡§∂‡§®',
    'Wisdom & Learning': '‡§ú‡•ç‡§û‡§æ‡§® ‡§î‡§∞ ‡§∏‡•Ä‡§ñ‡§®‡§æ',
    'Success & Perseverance': '‡§∏‡§´‡§≤‡§§‡§æ ‡§î‡§∞ ‡§¶‡•É‡§¢‡§º‡§§‡§æ',
    'Relationships & Character': '‡§∏‡§Ç‡§¨‡§Ç‡§ß ‡§î‡§∞ ‡§ö‡§∞‡§ø‡§§‡•ç‡§∞',
    'Strategy & Action': '‡§∞‡§£‡§®‡•Ä‡§§‡§ø ‡§î‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à',
    'Character & Behavior': '‡§ö‡§∞‡§ø‡§§‡•ç‡§∞ ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞'
  },
  ar: {
    'Life Philosophy': 'ŸÅŸÑÿ≥ŸÅÿ© ÿßŸÑÿ≠Ÿäÿßÿ©',
    'Wisdom & Learning': 'ÿßŸÑÿ≠ŸÉŸÖÿ© ŸàÿßŸÑÿ™ÿπŸÑŸÖ',
    'Success & Perseverance': 'ÿßŸÑŸÜÿ¨ÿßÿ≠ ŸàÿßŸÑŸÖÿ´ÿßÿ®ÿ±ÿ©',
    'Relationships & Character': 'ÿßŸÑÿπŸÑÿßŸÇÿßÿ™ ŸàÿßŸÑÿ¥ÿÆÿµŸäÿ©',
    'Strategy & Action': 'ÿßŸÑÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ŸàÿßŸÑÿπŸÖŸÑ',
    'Character & Behavior': 'ÿßŸÑÿ¥ÿÆÿµŸäÿ© ŸàÿßŸÑÿ≥ŸÑŸàŸÉ'
  },
  fr: {
    'Life Philosophy': 'Philosophie de Vie',
    'Wisdom & Learning': 'Sagesse et Apprentissage',
    'Success & Perseverance': 'Succ√®s et Pers√©v√©rance',
    'Relationships & Character': 'Relations et Caract√®re',
    'Strategy & Action': 'Strat√©gie et Action',
    'Character & Behavior': 'Caract√®re et Comportement'
  },
  tl: {
    'Life Philosophy': 'Pilosopiya ng Buhay',
    'Wisdom & Learning': 'Karunungan at Pagkatuto',
    'Success & Perseverance': 'Tagumpay at Pagtitiyaga',
    'Relationships & Character': 'Ugnayan at Pagkatao',
    'Strategy & Action': 'Estratehiya at Aksyon',
    'Character & Behavior': 'Pagkatao at Pag-uugali'
  },
  ms: {
    'Life Philosophy': 'Falsafah Kehidupan',
    'Wisdom & Learning': 'Kebijaksanaan dan Pembelajaran',
    'Success & Perseverance': 'Kejayaan dan Ketekunan',
    'Relationships & Character': 'Hubungan dan Perwatakan',
    'Strategy & Action': 'Strategi dan Tindakan',
    'Character & Behavior': 'Perwatakan dan Tingkah Laku'
  },
  ru: {
    'Life Philosophy': '–§–∏–ª–æ—Å–æ—Ñ–∏—è –∂–∏–∑–Ω–∏',
    'Wisdom & Learning': '–ú—É–¥—Ä–æ—Å—Ç—å –∏ –û–±—É—á–µ–Ω–∏–µ',
    'Success & Perseverance': '–£—Å–ø–µ—Ö –∏ –£–ø–æ—Ä—Å—Ç–≤–æ',
    'Relationships & Character': '–û—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –•–∞—Ä–∞–∫—Ç–µ—Ä',
    'Strategy & Action': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ –î–µ–π—Å—Ç–≤–∏–µ',
    'Character & Behavior': '–•–∞—Ä–∞–∫—Ç–µ—Ä –∏ –ü–æ–≤–µ–¥–µ–Ω–∏–µ'
  }
};

function fixThemesForLanguage(langCode) {
  console.log(`\n${'='.repeat(60)}`);
  console.log(`üé® Fixing themes for ${langCode.toUpperCase()}`);
  console.log(`${'='.repeat(60)}\n`);

  // Read English idioms to get canonical theme for each ID
  const englishPath = path.join(__dirname, '../public/idioms.json');
  const englishIdioms = JSON.parse(fs.readFileSync(englishPath, 'utf-8'));

  // Create ID -> English theme mapping
  const idToTheme = {};
  englishIdioms.forEach(idiom => {
    idToTheme[idiom.id] = idiom.theme;
  });

  // Read target language idioms
  const targetPath = langCode === 'en'
    ? englishPath
    : path.join(__dirname, `../public/translations/${langCode}/idioms.json`);

  if (!fs.existsSync(targetPath)) {
    console.log(`  ‚ùå File not found: ${targetPath}`);
    return { fixed: 0, errors: 0 };
  }

  const idioms = JSON.parse(fs.readFileSync(targetPath, 'utf-8'));
  const themeMapping = STANDARD_THEMES[langCode];

  if (!themeMapping) {
    console.log(`  ‚ùå No theme mapping defined for ${langCode}`);
    return { fixed: 0, errors: 0 };
  }

  let fixed = 0;
  let unchanged = 0;
  const themeCounts = {};

  // Fix each idiom's theme
  idioms.forEach(idiom => {
    const englishTheme = idToTheme[idiom.id];

    if (!englishTheme) {
      console.log(`  ‚ö†Ô∏è  ${idiom.id} - No English theme found`);
      return;
    }

    const correctTheme = themeMapping[englishTheme];

    if (!correctTheme) {
      console.log(`  ‚ö†Ô∏è  ${idiom.id} - No translation for theme: ${englishTheme}`);
      return;
    }

    if (idiom.theme !== correctTheme) {
      console.log(`  ${idiom.characters} (${idiom.id})`);
      console.log(`    Old: "${idiom.theme}"`);
      console.log(`    New: "${correctTheme}"`);
      idiom.theme = correctTheme;
      fixed++;
    } else {
      unchanged++;
    }

    // Count themes
    themeCounts[correctTheme] = (themeCounts[correctTheme] || 0) + 1;
  });

  // Save updated file
  fs.writeFileSync(targetPath, JSON.stringify(idioms, null, 2));

  console.log(`\n${'='.repeat(60)}`);
  console.log(`‚úÖ ${langCode.toUpperCase()} Complete`);
  console.log(`   Fixed: ${fixed}`);
  console.log(`   Unchanged: ${unchanged}`);
  console.log(`\n   Theme Distribution:`);

  Object.entries(themeCounts)
    .sort((a, b) => b[1] - a[1])
    .forEach(([theme, count]) => {
      console.log(`     ${count.toString().padStart(3)} - ${theme}`);
    });

  console.log(`${'='.repeat(60)}\n`);

  return { fixed, unchanged };
}

function fixAllLanguages() {
  console.log('\nüé® STANDARDIZING THEMES TO 6 ACROSS ALL LANGUAGES\n');
  console.log('üìã Standard Themes:');
  Object.keys(STANDARD_THEMES.en).forEach((theme, i) => {
    console.log(`   ${i + 1}. ${theme}`);
  });
  console.log('');

  const results = {};
  const languages = ['en', ...Object.keys(STANDARD_THEMES).filter(l => l !== 'en')];

  languages.forEach(langCode => {
    try {
      results[langCode] = fixThemesForLanguage(langCode);
    } catch (error) {
      console.error(`\n‚ùå Error processing ${langCode}: ${error.message}\n`);
      results[langCode] = { fixed: 0, unchanged: 0, errors: 1 };
    }
  });

  // Summary
  console.log('\n' + '='.repeat(60));
  console.log('üìä FINAL SUMMARY');
  console.log('='.repeat(60) + '\n');

  let totalFixed = 0;
  let totalUnchanged = 0;

  languages.forEach(langCode => {
    const result = results[langCode];
    const langName = langCode === 'en' ? 'English' : langCode.toUpperCase();
    console.log(`${langName.padEnd(15)} - Fixed: ${result.fixed}, Unchanged: ${result.unchanged}`);
    totalFixed += result.fixed;
    totalUnchanged += result.unchanged;
  });

  console.log('\n' + '-'.repeat(60));
  console.log(`TOTAL              - Fixed: ${totalFixed}, Unchanged: ${totalUnchanged}`);
  console.log('='.repeat(60) + '\n');
}

// Check if running with specific language argument
const args = process.argv.slice(2);
if (args.length > 0) {
  const langCode = args[0];
  if (STANDARD_THEMES[langCode]) {
    fixThemesForLanguage(langCode);
    console.log('‚úÖ Done!');
    process.exit(0);
  } else {
    console.error(`‚ùå Unknown language: ${langCode}`);
    console.log(`Available languages: ${Object.keys(STANDARD_THEMES).join(', ')}`);
    process.exit(1);
  }
} else {
  // Run for all languages
  fixAllLanguages();
  console.log('‚úÖ All languages processed!');
  process.exit(0);
}
